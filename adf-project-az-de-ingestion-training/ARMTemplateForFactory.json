{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-project-az-de-ingestion-training"
		},
		"LSAzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LSAzureSqlDatabase1'"
		},
		"LS_Raw_Rest_Parquet_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Raw_Rest_Parquet'"
		},
		"LS_Self_AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Self_AzureDataLakeStorage'"
		},
		"LS_SqlServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_SqlServer'"
		},
		"LSAzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "sql-project-srv-az-de-training.database.windows.net"
		},
		"LSAzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "sql-project-db-az-training"
		},
		"LSAzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "dev_access_data"
		},
		"LS_AzureBlobStorage_Source_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().system_acc_lock}"
		},
		"LS_AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().adls_storage_acc_lock}"
		},
		"LS_Excel_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().system_Assigned_lock}"
		},
		"LS_Raw_Rest_Parquet_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsprojectazderaw.dfs.core.windows.net/"
		},
		"LS_Self_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlsprojectdesrv.dfs.core.windows.net/"
		},
		"LS_SqlServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "APOORV_PRATEEK\\SQLEXPRESS"
		},
		"LS_SqlServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "deproject"
		},
		"LS_SqlServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "APK"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.sheetbest.com/sheets/addde0aa-8175-43d5-836c-7355ab2a73ad"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/L1_Master_Ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set_ver_trigger",
						"description": "Setting for trigger name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Trigger_variable",
							"value": {
								"value": "@if(equals(pipeline().parameters.Trigger,null),pipeline().TriggerName,pipeline().parameters.Trigger)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set_ver_trigger",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "L2_RAW_INGESTION",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Trigger": {
									"value": "@pipeline().parameters.Trigger",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"variables": {
					"Trigger_variable": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-22T21:11:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/L2_RAW_INGESTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/L2_RAW_INGESTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LU_get_L2_type",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct L2_switch_type from dbo.tbl_job a join dbo.tbl_trigger b on a.trigger_id = b.trigger_id where b.trigger_name = '@{pipeline().parameters.Trigger}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "LU_get_L2_type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('LU_get_L2_type').output.firstRow.L2_switch_type",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "API",
									"activities": [
										{
											"name": "RESTAPI",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Pl_rest_api",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Database",
									"activities": [
										{
											"name": "sqlonprem_migration",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "PL_Sql_migration",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "Filestore",
									"activities": [
										{
											"name": "Wait3",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "SFTP",
									"activities": [
										{
											"name": "Wait4",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "CloudStorage",
									"activities": [
										{
											"name": "Exe_L3_CloudStorage",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "L3_CloudStorage",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"variables": {
					"Mapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-24T22:47:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/pipelines/Pl_rest_api')]",
				"[concat(variables('factoryId'), '/pipelines/PL_Sql_migration')]",
				"[concat(variables('factoryId'), '/pipelines/L3_CloudStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/L3_CloudStorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LU_get_L3_type",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct L3_switch_type from dbo.tbl_job a\njoin dbo.tbl_trigger b on a.trigger_id =b.trigger_id\nwhere b.trigger_name = '@{pipeline().parameters.Trigger}'\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Switch_cloud",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "LU_get_L3_type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('LU_get_L3_type').output.firstRow.L3_switch_type",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Azure",
									"activities": [
										{
											"name": "Execute Pipeline1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "L4_FileType",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "AWS",
									"activities": [
										{
											"name": "Wait1",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								},
								{
									"value": "GCP",
									"activities": [
										{
											"name": "Wait2",
											"type": "Wait",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"waitTimeInSeconds": 1
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-22T00:42:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/pipelines/L4_FileType')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/L4_FileType')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lu_get_L4_type",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select distinct L4_switch_type from dbo.tbl_job a join dbo.tbl_trigger b on a.trigger_id =b.trigger_id\nwhere b.trigger_name = '@{pipeline().parameters.Trigger}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Lu_get_L4_type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('Lu_get_L4_type').output.firstRow.L4_switch_type",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "csv",
									"activities": [
										{
											"name": "Execute Pipeline1",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "L5_csv",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "excel",
									"activities": [
										{
											"name": "Execute Pipeline2",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "L6_excel",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"Trigger": {
														"value": "@pipeline().parameters.Trigger",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"variables": {
					"Mappng": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-22T00:42:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/pipelines/L5_csv')]",
				"[concat(variables('factoryId'), '/pipelines/L6_excel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/L5_csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_job_dtls",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[get_job_dtls]",
								"storedProcedureParameters": {
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Trigger",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "sp_start_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "get_job_dtls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[start_log_entry]",
							"storedProcedureParameters": {
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy_csv",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set_mapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_DelimitedText1",
								"type": "DatasetReference",
								"parameters": {
									"blob_storage_acc_lock": {
										"value": "@activity('get_job_dtls').output.firstRow.SourceAccount",
										"type": "Expression"
									},
									"col_delimiter": {
										"value": "@activity('get_job_dtls').output.firstRow.delimter",
										"type": "Expression"
									},
									"file": {
										"value": "@activity('get_job_dtls').output.firstRow.Sourcefile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Parquet_Raw",
								"type": "DatasetReference",
								"parameters": {
									"adls_storage_acc_lock": {
										"value": "@activity('get_job_dtls').output.firstRow.TargetAccount",
										"type": "Expression"
									},
									"directory": {
										"value": "@activity('get_job_dtls').output.firstRow.tgt_dir",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "sp_end_success_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[end_log_entry]",
							"storedProcedureParameters": {
								"error": {
									"value": "",
									"type": "String"
								},
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_end_fail_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_csv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[end_log_entry]",
							"storedProcedureParameters": {
								"error": {
									"value": {
										"value": "@activity('Copy_csv').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_mapping",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "sp_start_log_entry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Mapping",
							"value": "{\n            \"type\": \"TabularTranslator\",\n            \"mappings\": [\n                {\n                    \"source\": {\n                        \"name\": \"index\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"index\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Order ID\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"OrderID\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Date\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Date\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Status\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Status\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Fulfilment\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Fulfilment\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Sales Channel \",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"SalesChannel \",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ship-service-level\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"shipservicelevel\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Style\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Style\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"SKU\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"SKU\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Category\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Category\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Size\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Size\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ASIN\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"ASIN\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Courier Status\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"CourierStatus\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Qty\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Qty\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"currency\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"currency\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Amount\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Amount\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ship-city\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"shipcity\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ship-state\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"ship-state\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ship-postal-code\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"shippostalcode\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"ship-country\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"shipcountry\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"promotion-ids\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"promotionids\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"B2B\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"B2B\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"fulfilled-by\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"fulfilledby\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                },\n                {\n                    \"source\": {\n                        \"name\": \"Unnamed: 22\",\n                        \"type\": \"String\",\n                        \"physicalType\": \"String\"\n                    },\n                    \"sink\": {\n                        \"name\": \"Unnamed\",\n                        \"physicalType\": \"UTF8\"\n                    }\n                }\n            ],\n            \"typeConversion\": true,\n            \"typeConversionSettings\": {\n                \"allowDataTruncation\": true,\n                \"treatBooleanAsNumber\": false\n            }\n        }\n"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"variables": {
					"Mapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-22T15:33:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/LSAzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/DS_DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/DS_Parquet_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/L6_excel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_job_dtls",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[get_job_dtls]",
								"storedProcedureParameters": {
									"TriggerName": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.Trigger",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "sp_start_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "get_job_dtls",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[start_log_entry]",
							"storedProcedureParameters": {
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_end_success_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[end_log_entry]",
							"storedProcedureParameters": {
								"error": {
									"value": "",
									"type": "String"
								},
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "sp_end_fail_log_entry",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[end_log_entry]",
							"storedProcedureParameters": {
								"error": {
									"value": {
										"value": "@activity('Copy data1').error.message",
										"type": "Expression"
									},
									"type": "String"
								},
								"jobid": {
									"value": {
										"value": "@activity('get_job_dtls').output.firstRow.jobid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"pipeline_id": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LSAzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "sp_start_log_entry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Excel1",
								"type": "DatasetReference",
								"parameters": {
									"blob_storage_account_lock": {
										"value": "@activity('get_job_dtls').output.firstRow.SourceAccount",
										"type": "Expression"
									},
									"File": {
										"value": "@activity('get_job_dtls').output.firstRow.Sourcefile",
										"type": "Expression"
									},
									"sheetname": {
										"value": "@activity('get_job_dtls').output.firstRow.sheetname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Parquet_Raw",
								"type": "DatasetReference",
								"parameters": {
									"adls_storage_acc_lock": {
										"value": "@activity('get_job_dtls').output.firstRow.TargetAccount",
										"type": "Expression"
									},
									"directory": {
										"value": "@activity('get_job_dtls').output.firstRow.tgt_dir",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"variables": {
					"Mapping": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-22T23:37:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/LSAzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/DS_Excel1')]",
				"[concat(variables('factoryId'), '/datasets/DS_Parquet_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Sql_migration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "onpremtoADLS",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Self_SqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Self_Parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-24T22:46:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Self_SqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_Self_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pl_rest_api')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyRest",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['index']"
										},
										"sink": {
											"name": "index"
										}
									},
									{
										"source": {
											"path": "$['Sku']"
										},
										"sink": {
											"name": "Sku"
										}
									},
									{
										"source": {
											"path": "$['Style_Id']"
										},
										"sink": {
											"name": "Style_Id"
										}
									},
									{
										"source": {
											"path": "$['Catalog']"
										},
										"sink": {
											"name": "Catalog"
										}
									},
									{
										"source": {
											"path": "$['Category']"
										},
										"sink": {
											"name": "Category"
										}
									},
									{
										"source": {
											"path": "$['Weight']"
										},
										"sink": {
											"name": "Weight"
										}
									},
									{
										"source": {
											"path": "$['TP']"
										},
										"sink": {
											"name": "TP"
										}
									},
									{
										"source": {
											"path": "$['MRP_Old']"
										},
										"sink": {
											"name": "MRP_Old"
										}
									},
									{
										"source": {
											"path": "$['Final_MRP_Old']"
										},
										"sink": {
											"name": "Final_MRP_Old"
										}
									},
									{
										"source": {
											"path": "$['Ajio_MRP']"
										},
										"sink": {
											"name": "Ajio_MRP"
										}
									},
									{
										"source": {
											"path": "$['Amazon_MRP']"
										},
										"sink": {
											"name": "Amazon_MRP"
										}
									},
									{
										"source": {
											"path": "$['Amazon_FBA_MRP']"
										},
										"sink": {
											"name": "Amazon_FBA_MRP"
										}
									},
									{
										"source": {
											"path": "$['Flipkart_MRP']"
										},
										"sink": {
											"name": "Flipkart_MRP"
										}
									},
									{
										"source": {
											"path": "$['Limeroad_MRP']"
										},
										"sink": {
											"name": "Limeroad_MRP"
										}
									},
									{
										"source": {
											"path": "$['Myntra_MRP']"
										},
										"sink": {
											"name": "Myntra_MRP"
										}
									},
									{
										"source": {
											"path": "$['Paytm_MRP']"
										},
										"sink": {
											"name": "Paytm_MRP"
										}
									},
									{
										"source": {
											"path": "$['Snapdeal_MRP']"
										},
										"sink": {
											"name": "Snapdeal_MRP"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_REST_Parquet_Raw",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Trigger": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-06-24T22:41:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/DS_REST_Parquet_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremsqlservertoazuresql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "index",
											"type": "Int64",
											"physicalType": "bigint"
										},
										"sink": {
											"name": "index",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "DATE",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATE",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Months",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Months",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CUSTOMER",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "CUSTOMER",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Style",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Style",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "SKU",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "SKU",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Size",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "PCS",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "PCS",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "RATE",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "RATE",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "GROSS_AMT",
											"type": "Int16",
											"physicalType": "smallint"
										},
										"sink": {
											"name": "GROSS_AMT",
											"type": "Int16",
											"physicalType": "smallint"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Self_SqlServerTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Self_SqlServerTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSAzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "International sale Report"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LSAzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage_Source",
					"type": "LinkedServiceReference",
					"parameters": {
						"system_acc_lock": {
							"value": "@dataset().blob_storage_acc_lock",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"blob_storage_acc_lock": {
						"type": "string"
					},
					"col_delimiter": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"container": "sourcedata"
					},
					"columnDelimiter": {
						"value": "@dataset().col_delimiter",
						"type": "Expression"
					},
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureBlobStorage_Source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Excel",
					"type": "LinkedServiceReference",
					"parameters": {
						"system_Assigned_lock": {
							"value": "@dataset().blob_storage_account_lock",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"blob_storage_account_lock": {
						"type": "string"
					},
					"File": {
						"type": "string"
					},
					"sheetname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@dataset().sheetname",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"container": "sourcedata"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Excel')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Parquet_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureDataLakeStorage1",
					"type": "LinkedServiceReference",
					"parameters": {
						"adls_storage_acc_lock": {
							"value": "@dataset().adls_storage_acc_lock",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"adls_storage_acc_lock": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_REST_Parquet_Raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Raw_Rest_Parquet",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "march2022"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "Prop_0",
						"type": "UTF8"
					},
					{
						"name": "Prop_1",
						"type": "UTF8"
					},
					{
						"name": "Prop_2",
						"type": "UTF8"
					},
					{
						"name": "Prop_3",
						"type": "UTF8"
					},
					{
						"name": "Prop_4",
						"type": "UTF8"
					},
					{
						"name": "Prop_5",
						"type": "UTF8"
					},
					{
						"name": "Prop_6",
						"type": "UTF8"
					},
					{
						"name": "Prop_7",
						"type": "UTF8"
					},
					{
						"name": "Prop_8",
						"type": "UTF8"
					},
					{
						"name": "Prop_9",
						"type": "UTF8"
					},
					{
						"name": "Prop_10",
						"type": "UTF8"
					},
					{
						"name": "Prop_11",
						"type": "UTF8"
					},
					{
						"name": "Prop_12",
						"type": "UTF8"
					},
					{
						"name": "Prop_13",
						"type": "UTF8"
					},
					{
						"name": "Prop_14",
						"type": "UTF8"
					},
					{
						"name": "Prop_15",
						"type": "UTF8"
					},
					{
						"name": "Prop_16",
						"type": "UTF8"
					},
					{
						"name": "Prop_17",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Raw_Rest_Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Self_Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Self_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "international_sales",
						"fileSystem": "onpremisesql"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Self_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Self_SqlServerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "International sale Report"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LSAzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('LSAzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('LSAzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('LSAzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LSAzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureBlobStorage_Source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"system_acc_lock": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_AzureBlobStorage_Source_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "BlobStorage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"adls_storage_acc_lock": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_AzureDataLakeStorage1_properties_typeProperties_url')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Excel')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"system_Assigned_lock": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_Excel_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "BlobStorage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Raw_Rest_Parquet')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Raw_Rest_Parquet_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Raw_Rest_Parquet_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Self_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Self_AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Self_AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('LS_SqlServer_properties_typeProperties_server')]",
					"database": "[parameters('LS_SqlServer_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('LS_SqlServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_SqlServer_password')]"
					}
				},
				"connectVia": {
					"referenceName": "selfhostedintegrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/selfhostedintegrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selfhostedintegrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}